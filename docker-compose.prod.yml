services:
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: workflowguard
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - workflowguard-network

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: "postgresql://postgres:postgres123@db:5432/workflowguard"
      DIRECT_URL: "postgresql://postgres:postgres123@db:5432/workflowguard"
      PORT: 4000
      NODE_ENV: production
      HUBSPOT_APP_ID: "18270797"
      HUBSPOT_CLIENT_ID: "5e6a6429-8317-4e2a-a9b5-46e8669f72f6"
      HUBSPOT_CLIENT_SECRET: "07f931e2-bc75-4686-a9cf-c1d464c55019"
      HUBSPOT_REDIRECT_URI: "https://api.workflowguard.pro/api/auth/hubspot/callback"
      JWT_SECRET: "${JWT_SECRET}"
      SESSION_SECRET: "${SESSION_SECRET}"
      # Razorpay Configuration
      RAZORPAY_KEY_ID: "${RAZORPAY_KEY_ID}"
      RAZORPAY_KEY_SECRET: "${RAZORPAY_KEY_SECRET}"
      RAZORPAY_WEBHOOK_SECRET: "${RAZORPAY_WEBHOOK_SECRET}"
      # Razorpay Plan IDs
      RAZORPAY_PLAN_ID_STARTER_INR: "${RAZORPAY_PLAN_ID_STARTER_INR}"
      RAZORPAY_PLAN_ID_PROFESSIONAL_INR: "${RAZORPAY_PLAN_ID_PROFESSIONAL_INR}"
      RAZORPAY_PLAN_ID_ENTERPRISE_INR: "${RAZORPAY_PLAN_ID_ENTERPRISE_INR}"
      # Twilio WhatsApp Configuration
      TWILIO_ACCOUNT_SID: "${TWILIO_ACCOUNT_SID}"
      TWILIO_AUTH_TOKEN: "${TWILIO_AUTH_TOKEN}"
      # Logging
      LOG_LEVEL: "${LOG_LEVEL}"
    ports:
      - "127.0.0.1:4000:4000"  # Bind to localhost only (Nginx proxy)
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const req = http.get('http://localhost:4000/', (res) => process.exit(0)); req.on('error', () => process.exit(1)); req.setTimeout(5000, () => { req.destroy(); process.exit(1); });"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - workflowguard-network

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "127.0.0.1:3000:80"  # Bind to localhost only (Nginx proxy)
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - workflowguard-network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - workflowguard-network

volumes:
  postgres_data:

networks:
  workflowguard-network:
    driver: bridge
