import { PrismaService } from '../prisma/prisma.service';
import { HubSpotService } from '../services/hubspot.service';
import { SubscriptionService } from '../subscription/subscription.service';
import { WorkflowVersionService } from '../workflow-version/workflow-version.service';
export declare class WorkflowService {
    private prisma;
    private hubspotService;
    private subscriptionService;
    private workflowVersionService;
    constructor(prisma: PrismaService, hubspotService: HubSpotService, subscriptionService: SubscriptionService, workflowVersionService: WorkflowVersionService);
    create(createWorkflowDto: any): Promise<{
        name: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        status: string | null;
        ownerId: string;
        hubspotId: string;
        deletedAt: Date | null;
        isDeleted: boolean;
        restoredAt: Date | null;
    }>;
    findAll(): Promise<({
        owner: {
            email: string;
            name: string | null;
            password: string | null;
            jobTitle: string | null;
            timezone: string | null;
            language: string | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            hubspotPortalId: string | null;
            hubspotAccessToken: string | null;
            hubspotRefreshToken: string | null;
            hubspotTokenExpiresAt: Date | null;
        };
        versions: {
            id: string;
            createdAt: Date;
            data: import("@prisma/client/runtime/library").JsonValue;
            workflowId: string;
            versionNumber: number;
            snapshotType: string;
            createdBy: string;
        }[];
    } & {
        name: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        status: string | null;
        ownerId: string;
        hubspotId: string;
        deletedAt: Date | null;
        isDeleted: boolean;
        restoredAt: Date | null;
    })[]>;
    getHubSpotWorkflows(userId: string): Promise<any[]>;
    compareWorkflowVersions(workflowId: string, versionA: string, versionB: string): Promise<any>;
    private findWorkflowDifferences;
    private compareActionProperties;
    private transformWorkflowDataToSteps;
    private getStepType;
    getWorkflowVersions(workflowId: string, userId: string): Promise<any[]>;
    createInitialVersionIfMissing(workflowId: string, userId: string): Promise<any>;
    findOne(id: string, userId: string): Promise<{
        lastModified: Date;
        totalVersions: number;
        hubspotUrl: string | null;
        owner: {
            email: string;
            name: string | null;
            password: string | null;
            jobTitle: string | null;
            timezone: string | null;
            language: string | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            hubspotPortalId: string | null;
            hubspotAccessToken: string | null;
            hubspotRefreshToken: string | null;
            hubspotTokenExpiresAt: Date | null;
        };
        versions: {
            id: string;
            createdAt: Date;
            data: import("@prisma/client/runtime/library").JsonValue;
            workflowId: string;
            versionNumber: number;
            snapshotType: string;
            createdBy: string;
        }[];
        name: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        status: string | null;
        ownerId: string;
        hubspotId: string;
        deletedAt: Date | null;
        isDeleted: boolean;
        restoredAt: Date | null;
    }>;
    findByHubspotId(hubspotId: string, userId: string): Promise<{
        lastModified: Date;
        totalVersions: number;
        owner: {
            email: string;
            name: string | null;
            password: string | null;
            jobTitle: string | null;
            timezone: string | null;
            language: string | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            hubspotPortalId: string | null;
            hubspotAccessToken: string | null;
            hubspotRefreshToken: string | null;
            hubspotTokenExpiresAt: Date | null;
        };
        versions: {
            id: string;
            createdAt: Date;
            data: import("@prisma/client/runtime/library").JsonValue;
            workflowId: string;
            versionNumber: number;
            snapshotType: string;
            createdBy: string;
        }[];
        name: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        status: string | null;
        ownerId: string;
        hubspotId: string;
        deletedAt: Date | null;
        isDeleted: boolean;
        restoredAt: Date | null;
    } | {
        id: string;
        hubspotId: string;
        name: string;
        ownerId: string;
        createdAt: Date;
        updatedAt: Date;
        versions: never[];
        totalVersions: number;
        lastModified: Date;
    }>;
    update(id: string, updateWorkflowDto: any): Promise<{
        name: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        status: string | null;
        ownerId: string;
        hubspotId: string;
        deletedAt: Date | null;
        isDeleted: boolean;
        restoredAt: Date | null;
    }>;
    remove(id: string): Promise<{
        name: string;
        id: string;
        createdAt: Date;
        updatedAt: Date;
        status: string | null;
        ownerId: string;
        hubspotId: string;
        deletedAt: Date | null;
        isDeleted: boolean;
        restoredAt: Date | null;
    }>;
    startWorkflowProtection(workflowIds: string[], userId: string, selectedWorkflowObjects: any[]): Promise<any[]>;
    private checkWorkflowLimits;
    getProtectedWorkflows(userId: string): Promise<any[]>;
    getProtectedWorkflowIds(userId: string): Promise<string[]>;
    private normalizeWorkflowData;
    private compareWorkflowStructure;
    syncHubSpotWorkflows(userId: string): Promise<any[]>;
    createAutomatedBackup(workflowId: string, userId: string): Promise<any>;
    createChangeNotification(workflowId: string, userId: string, changes: any): Promise<void>;
    createApprovalRequest(workflowId: string, userId: string, requestedChanges: any): Promise<any>;
    generateComplianceReport(workflowId: string, startDate: Date, endDate: Date): Promise<any>;
    restoreWorkflowVersion(workflowId: string, versionId: string, userId: string): Promise<any>;
    rollbackWorkflow(workflowId: string, userId: string): Promise<any>;
    downloadWorkflowVersion(workflowId: string, versionId: string): Promise<any>;
    getWorkflowStats(userId: string): Promise<any>;
    getDashboardStats(userId: string): Promise<any>;
    exportWorkflow(workflowId: string): Promise<any>;
    exportAllWorkflows(userId: string): Promise<any>;
    exportDeletedWorkflow(workflowId: string, userId: string): Promise<any>;
    private formatActionsForExport;
    private formatTriggersForExport;
    private getActionDescription;
    private getActionConfiguration;
    private calculateWorkflowSteps;
    private calculateWorkflowContacts;
    handleWorkflowUpdate(portalId: string, hubspotWorkflowId: string): Promise<void>;
    handleWorkflowDeletion(portalId: string, hubspotWorkflowId: string): Promise<void>;
    restoreDeletedWorkflow(workflowId: string, userId: string): Promise<any>;
}
