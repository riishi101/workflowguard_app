// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                    String                @id @default(uuid())
  email                 String                @unique
  name                  String?

  password              String?
  jobTitle              String?
  timezone              String?
  language              String?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  hubspotPortalId       String?               @unique
  hubspotAccessToken    String?
  hubspotRefreshToken   String?
  hubspotTokenExpiresAt DateTime?
  apiKeys               ApiKey[]
  auditLogs             AuditLog[]
  notificationSettings  NotificationSettings?
  overages              Overage[]
  subscription          Subscription?
  webhooks              Webhook[]
  workflows             Workflow[]
  supportTickets        SupportTicket[]
  supportReplies        SupportReply[]
}

model Workflow {
  id        String            @id @default(uuid())
  hubspotId String            @unique
  name      String
  ownerId   String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  owner     User              @relation(fields: [ownerId], references: [id])
  versions  WorkflowVersion[]
}

model WorkflowVersion {
  id            String   @id @default(uuid())
  workflowId    String
  versionNumber Int
  snapshotType  String
  createdBy     String
  createdAt     DateTime @default(now())
  data          String   // JSON as string for SQLite
  workflow      Workflow @relation(fields: [workflowId], references: [id])

  @@unique([workflowId, versionNumber])
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String?
  action     String
  entityType String
  entityId   String
  oldValue   String?  // JSON as string for SQLite
  newValue   String?  // JSON as string for SQLite
  timestamp  DateTime @default(now())
  ipAddress  String?
  user       User?    @relation(fields: [userId], references: [id])
}

model Subscription {
  id              String    @id @default(uuid())
  userId          String    @unique
  planId          String
  status          String
  trialEndDate    DateTime?
  nextBillingDate DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id])
}

model Webhook {
  id          String   @id @default(uuid())
  userId      String
  name        String?
  endpointUrl String
  secret      String?
  events      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Plan {
  id          String   @id
  name        String
  description String?
  price       Float
  interval    String
  features    String?  // JSON as string for SQLite
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Overage {
  id          String    @id @default(uuid())
  userId      String
  planId      String
  amount      Float
  description String?
  isBilled    Boolean   @default(false)
  billedAt    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
}

model NotificationSettings {
  id                    String @id @default(uuid())
  userId                String @unique
  enabled               Boolean @default(true)
  email                 String
  workflowDeleted       Boolean @default(true)
  enrollmentTriggerModified Boolean @default(true)
  workflowRolledBack    Boolean @default(true)
  criticalActionModified Boolean @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id])
}

model ApiKey {
  id          String   @id @default(uuid())
  userId      String
  name        String
  description String?
  key         String   @unique
  isActive    Boolean  @default(true)
  lastUsed    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model SsoConfig {
  id                String @id @default(uuid())
  provider          String @unique
  clientId          String
  clientSecret      String
  redirectUri       String
  isEnabled         Boolean @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model SupportTicket {
  id          String           @id @default(uuid())
  userId      String
  subject     String
  description String
  status      String           @default("open")
  priority    String           @default("medium")
  category    String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id])
  replies     SupportReply[]
}

model SupportReply {
  id          String         @id @default(uuid())
  ticketId    String
  userId      String
  message     String
  isInternal  Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  ticket      SupportTicket  @relation(fields: [ticketId], references: [id])
  user        User           @relation(fields: [userId], references: [id])
} 