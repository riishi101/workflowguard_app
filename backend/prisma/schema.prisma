generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                @id @default(uuid())
  email                 String                @unique
  name                  String?
  password              String?
  jobTitle              String?
  timezone              String?
  language              String?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  hubspotPortalId       String?               @unique
  hubspotAccessToken    String?
  hubspotRefreshToken   String?
  hubspotTokenExpiresAt DateTime?
  apiKeys               ApiKey[]
  auditLogs             AuditLog[]
  notificationSettings  NotificationSettings?
  overages              Overage[]
  paymentTransactions   PaymentTransaction[]
  subscription          Subscription?
  supportReplies        SupportReply[]
  supportTickets        SupportTicket[]
  webhooks              Webhook[]
  workflows             Workflow[]
}

model Workflow {
  id         String            @id @default(uuid())
  hubspotId  String            @unique
  name       String
  ownerId    String
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  deletedAt  DateTime?
  isDeleted  Boolean           @default(false)
  restoredAt DateTime?
  status     String?           @default("inactive")
  owner      User              @relation(fields: [ownerId], references: [id])
  versions   WorkflowVersion[]
}

model WorkflowVersion {
  id            String   @id @default(uuid())
  workflowId    String
  versionNumber Int
  snapshotType  String
  createdBy     String
  createdAt     DateTime @default(now())
  data          Json
  workflow      Workflow @relation(fields: [workflowId], references: [id])

  @@unique([workflowId, versionNumber])
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String?
  action     String
  entityType String
  entityId   String
  oldValue   Json?
  newValue   Json?
  timestamp  DateTime @default(now())
  ipAddress  String?
  user       User?    @relation(fields: [userId], references: [id])
}

model Subscription {
  id                     String    @id @default(uuid())
  userId                 String    @unique
  planId                 String
  status                 String
  trialEndDate           DateTime?
  nextBillingDate        DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  razorpayCustomerId     String?
  razorpaySubscriptionId String?
  user                   User      @relation(fields: [userId], references: [id])
}

model Webhook {
  id          String   @id @default(uuid())
  userId      String
  name        String?
  endpointUrl String
  secret      String?
  events      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Plan {
  id          String   @id
  name        String
  description String?
  price       Float
  interval    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  features    Json?
}

model Overage {
  id          String    @id @default(uuid())
  userId      String
  planId      String
  amount      Float
  description String?
  isBilled    Boolean   @default(false)
  billedAt    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
}

model NotificationSettings {
  id                        String   @id @default(uuid())
  userId                    String   @unique
  enabled                   Boolean  @default(true)
  email                     String
  workflowDeleted           Boolean  @default(true)
  enrollmentTriggerModified Boolean  @default(true)
  workflowRolledBack        Boolean  @default(true)
  criticalActionModified    Boolean  @default(true)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  user                      User     @relation(fields: [userId], references: [id])
}

model ApiKey {
  id          String    @id @default(uuid())
  userId      String
  name        String
  description String?
  key         String    @unique
  isActive    Boolean   @default(true)
  lastUsed    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
}

model SsoConfig {
  id           String   @id @default(uuid())
  provider     String   @unique
  clientId     String
  clientSecret String
  redirectUri  String
  isEnabled    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model SupportTicket {
  id          String         @id @default(uuid())
  userId      String
  subject     String
  description String
  status      String         @default("open")
  priority    String         @default("medium")
  category    String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  replies     SupportReply[]
  user        User           @relation(fields: [userId], references: [id])
}

model SupportReply {
  id         String        @id @default(uuid())
  ticketId   String
  userId     String
  message    String
  isInternal Boolean       @default(false)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  ticket     SupportTicket @relation(fields: [ticketId], references: [id])
  user       User          @relation(fields: [userId], references: [id])
}

model PaymentTransaction {
  id                    String   @id @default(uuid())
  userId                String
  planId                String
  
  // Razorpay Integration
  razorpayOrderId       String   @unique
  razorpayPaymentId     String?  @unique
  razorpaySignature     String?
  
  // Payment Details
  amount                Int      // Amount in smallest currency unit (paise/cents)
  currency              String   @default("INR")
  status                String   // pending, success, failed, refunded
  
  // Payment Method Details
  paymentMethod         String?  // card, upi, netbanking, wallet
  cardLast4             String?
  cardNetwork           String?  // visa, mastercard, etc.
  bankName              String?
  
  // Business Logic
  planName              String
  subscriptionId        String?
  
  // Audit Trail
  ipAddress             String?
  userAgent             String?
  
  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  paidAt                DateTime?
  failedAt              DateTime?
  refundedAt            DateTime?
  
  // Error Handling
  errorCode             String?
  errorDescription      String?
  
  // Relations
  user                  User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([razorpayOrderId])
}

model PaymentRefund {
  id                    String   @id @default(uuid())
  paymentTransactionId  String
  
  // Razorpay Refund Details
  razorpayRefundId      String   @unique
  amount                Int      // Refund amount in smallest currency unit
  currency              String   @default("INR")
  status                String   // pending, processed, failed
  
  // Refund Details
  reason                String?
  notes                 String?
  
  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  processedAt           DateTime?
  
  @@index([paymentTransactionId])
  @@index([status])
}
