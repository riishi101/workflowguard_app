version: '3.8'

# HOSTINGER SPECIAL CONFIGURATION
# Hostinger VPS limitation: Only ONE port can be active at a time
# This configuration uses ONLY port 443 (HTTPS) for all traffic

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: workflowguard_postgres
    environment:
      POSTGRES_DB: workflowguard
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    networks:
      - workflowguard-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: workflowguard_backend
    environment:
      - NODE_ENV=production
      - PORT=4000
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/workflowguard
      - DIRECT_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/workflowguard
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
      - HUBSPOT_APP_ID=${HUBSPOT_APP_ID}
      - HUBSPOT_CLIENT_ID=${HUBSPOT_CLIENT_ID}
      - HUBSPOT_CLIENT_SECRET=${HUBSPOT_CLIENT_SECRET}
      - HUBSPOT_REDIRECT_URI=https://api.workflowguard.pro/api/auth/hubspot/callback
      - HUBSPOT_SCOPES=automation oauth
      - RAZORPAY_KEY_ID=${RAZORPAY_KEY_ID}
      - RAZORPAY_KEY_SECRET=${RAZORPAY_KEY_SECRET}
      - RAZORPAY_WEBHOOK_SECRET=${RAZORPAY_WEBHOOK_SECRET}
      - RAZORPAY_PLAN_ID_STARTER_INR=${RAZORPAY_PLAN_ID_STARTER_INR}
      - RAZORPAY_PLAN_ID_PROFESSIONAL_INR=${RAZORPAY_PLAN_ID_PROFESSIONAL_INR}
      - RAZORPAY_PLAN_ID_ENTERPRISE_INR=${RAZORPAY_PLAN_ID_ENTERPRISE_INR}
      - RAZORPAY_PLAN_ID_STARTER_USD=${RAZORPAY_PLAN_ID_STARTER_USD}
      - RAZORPAY_PLAN_ID_PROFESSIONAL_USD=${RAZORPAY_PLAN_ID_PROFESSIONAL_USD}
      - RAZORPAY_PLAN_ID_ENTERPRISE_USD=${RAZORPAY_PLAN_ID_ENTERPRISE_USD}
      - RAZORPAY_PLAN_ID_STARTER_GBP=${RAZORPAY_PLAN_ID_STARTER_GBP}
      - RAZORPAY_PLAN_ID_PROFESSIONAL_GBP=${RAZORPAY_PLAN_ID_PROFESSIONAL_GBP}
      - RAZORPAY_PLAN_ID_ENTERPRISE_GBP=${RAZORPAY_PLAN_ID_ENTERPRISE_GBP}
      - RAZORPAY_PLAN_ID_STARTER_EUR=${RAZORPAY_PLAN_ID_STARTER_EUR}
      - RAZORPAY_PLAN_ID_PROFESSIONAL_EUR=${RAZORPAY_PLAN_ID_PROFESSIONAL_EUR}
      - RAZORPAY_PLAN_ID_ENTERPRISE_EUR=${RAZORPAY_PLAN_ID_ENTERPRISE_EUR}
      - RAZORPAY_PLAN_ID_STARTER_CAD=${RAZORPAY_PLAN_ID_STARTER_CAD}
      - RAZORPAY_PLAN_ID_PROFESSIONAL_CAD=${RAZORPAY_PLAN_ID_PROFESSIONAL_CAD}
      - RAZORPAY_PLAN_ID_ENTERPRISE_CAD=${RAZORPAY_PLAN_ID_ENTERPRISE_CAD}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_WHATSAPP_NUMBER=${TWILIO_WHATSAPP_NUMBER}
      - FRONTEND_URL=https://workflowguard.pro
      - ALLOWED_ORIGINS=https://workflowguard.pro
      - JWT_EXPIRES_IN=7d
      - LOG_LEVEL=${LOG_LEVEL}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - workflowguard-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/api"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: workflowguard_frontend
    environment:
      - NODE_ENV=production
      - VITE_API_URL=https://api.workflowguard.pro
      - VITE_HUBSPOT_CLIENT_ID=${HUBSPOT_CLIENT_ID}
    networks:
      - workflowguard-network
    restart: unless-stopped

  # Nginx Reverse Proxy - HTTPS ONLY (Port 443)
  nginx:
    image: nginx:alpine
    container_name: workflowguard_nginx
    ports:
      - "443:443"  # ONLY HTTPS - Hostinger limitation
    volumes:
      - ./nginx/nginx.hostinger.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - workflowguard-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  workflowguard-network:
    driver: bridge
