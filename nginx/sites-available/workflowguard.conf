# Frontend configuration
server {
    listen 80;
    server_name workflowguard.pro www.workflowguard.pro;

    # Redirect HTTP to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name workflowguard.pro www.workflowguard.pro;

    # SSL certificates
    ssl_certificate /etc/nginx/ssl/workflowguard.pro.crt;
    ssl_certificate_key /etc/nginx/ssl/workflowguard.pro.key;

    # Frontend
    location / {
        proxy_pass http://frontend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
}

# API configuration
server {
    listen 80;
    server_name api.workflowguard.pro;

    # Redirect HTTP to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name api.workflowguard.pro;

    # SSL certificates
    ssl_certificate /etc/nginx/ssl/api.workflowguard.pro.crt;
    ssl_certificate_key /etc/nginx/ssl/api.workflowguard.pro.key;

    # Backend API
    location / {
        proxy_pass http://backend:3001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
}

# Upstream definitions
upstream frontend {
    server frontend:80;
}

upstream backend {
    server backend:3001;
}