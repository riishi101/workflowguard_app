version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: workflowguard_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: workflowguard
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - workflowguard_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: workflowguard_backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/workflowguard
      DIRECT_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/workflowguard
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      SESSION_SECRET: ${SESSION_SECRET}
      HUBSPOT_APP_ID: ${HUBSPOT_APP_ID}
      HUBSPOT_CLIENT_ID: ${HUBSPOT_CLIENT_ID}
      HUBSPOT_CLIENT_SECRET: ${HUBSPOT_CLIENT_SECRET}
      HUBSPOT_REDIRECT_URI: ${HUBSPOT_REDIRECT_URI}
      FRONTEND_URL: ${FRONTEND_URL}
      RAZORPAY_KEY_ID: ${RAZORPAY_KEY_ID}
      RAZORPAY_KEY_SECRET: ${RAZORPAY_KEY_SECRET}
      RAZORPAY_WEBHOOK_SECRET: ${RAZORPAY_WEBHOOK_SECRET}
      RAZORPAY_PLAN_ID_STARTER_INR: ${RAZORPAY_PLAN_ID_STARTER_INR}
      RAZORPAY_PLAN_ID_PROFESSIONAL_INR: ${RAZORPAY_PLAN_ID_PROFESSIONAL_INR}
      RAZORPAY_PLAN_ID_ENTERPRISE_INR: ${RAZORPAY_PLAN_ID_ENTERPRISE_INR}
      RAZORPAY_PLAN_ID_STARTER_USD: ${RAZORPAY_PLAN_ID_STARTER_USD}
      RAZORPAY_PLAN_ID_PROFESSIONAL_USD: ${RAZORPAY_PLAN_ID_PROFESSIONAL_USD}
      RAZORPAY_PLAN_ID_ENTERPRISE_USD: ${RAZORPAY_PLAN_ID_ENTERPRISE_USD}
      RAZORPAY_PLAN_ID_STARTER_GBP: ${RAZORPAY_PLAN_ID_STARTER_GBP}
      RAZORPAY_PLAN_ID_PROFESSIONAL_GBP: ${RAZORPAY_PLAN_ID_PROFESSIONAL_GBP}
      RAZORPAY_PLAN_ID_ENTERPRISE_GBP: ${RAZORPAY_PLAN_ID_ENTERPRISE_GBP}
      RAZORPAY_PLAN_ID_STARTER_EUR: ${RAZORPAY_PLAN_ID_STARTER_EUR}
      RAZORPAY_PLAN_ID_PROFESSIONAL_EUR: ${RAZORPAY_PLAN_ID_PROFESSIONAL_EUR}
      RAZORPAY_PLAN_ID_ENTERPRISE_EUR: ${RAZORPAY_PLAN_ID_ENTERPRISE_EUR}
      RAZORPAY_PLAN_ID_STARTER_CAD: ${RAZORPAY_PLAN_ID_STARTER_CAD}
      RAZORPAY_PLAN_ID_PROFESSIONAL_CAD: ${RAZORPAY_PLAN_ID_PROFESSIONAL_CAD}
      RAZORPAY_PLAN_ID_ENTERPRISE_CAD: ${RAZORPAY_PLAN_ID_ENTERPRISE_CAD}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      LOG_LEVEL: ${LOG_LEVEL}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - workflowguard_network
    volumes:
      - ./backend/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    container_name: workflowguard_frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: ${VITE_API_URL}
      VITE_FRONTEND_URL: ${VITE_FRONTEND_URL}
      VITE_RAZORPAY_KEY_ID: ${VITE_RAZORPAY_KEY_ID}
      VITE_HUBSPOT_CLIENT_ID: ${HUBSPOT_CLIENT_ID}
    ports:
      - "3000:80"
    networks:
      - workflowguard_network
    depends_on:
      - backend

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: workflowguard_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-available:/etc/nginx/sites-available
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled
      - ./ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - workflowguard_network

volumes:
  postgres_data:
    driver: local

networks:
  workflowguard_network:
    driver: bridge
