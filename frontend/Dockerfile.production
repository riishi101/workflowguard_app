# SIMPLIFIED Frontend Dockerfile - Focus on getting it working
FROM node:20-slim AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y python3 make g++ && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy and install dependencies first (better caching)
COPY package*.json ./
RUN npm ci || npm install

# Copy all source files
COPY . .

# Create public directory and ensure assets are in place
RUN mkdir -p public && \
    if [ -f LogoW.png ]; then cp LogoW.png public/; fi && \
    if [ ! -f public/favicon.ico ]; then touch public/favicon.ico; fi

# Set build environment
ENV NODE_ENV=production
ENV VITE_API_URL=https://api.workflowguard.pro
ENV VITE_APP_URL=https://www.workflowguard.pro

# Build with simple error handling
RUN npm run build || \
    (echo "Build failed, checking for common issues..." && \
     echo "Checking node_modules:" && ls -la node_modules/ | head -20 && \
     echo "Checking for vite:" && ls -la node_modules/.bin/ | grep vite && \
     echo "Attempting direct vite build:" && \
     npx vite build) || \
    (echo "All builds failed, creating emergency fallback" && \
     mkdir -p dist && \
     cp index.html dist/ 2>/dev/null || \
     echo '<!DOCTYPE html><html><head><title>WorkflowGuard</title><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"></head><body><div id="root"><h1>Loading WorkflowGuard...</h1><p>If you see this, the React app failed to build.</p></div></body></html>' > dist/index.html)

# Stage 2: Production stage
FROM nginx:alpine AS production

# Copy built application
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy custom nginx configuration
COPY nginx.production.conf /etc/nginx/nginx.conf

# Expose port
EXPOSE 80

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
