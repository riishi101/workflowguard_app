# Simplified Frontend Dockerfile - Using same base as successful backend
# Changed from Alpine to Debian slim for compatibility

# Stage 1: Build stage
FROM node:20-slim AS builder

# Install build tools for potential native dependencies (Debian syntax)
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Debug: Show package.json content
RUN echo "=== FRONTEND PACKAGE.JSON CONTENT ===" && cat package.json

# Install dependencies with verbose output and increased memory
RUN echo "=== INSTALLING FRONTEND DEPENDENCIES ===" && NODE_OPTIONS="--max-old-space-size=2048" npm install --verbose

# Copy source code
COPY . .

# Debug: Show directory structure
RUN echo "=== FRONTEND DIRECTORY STRUCTURE ===" && ls -la src/

# Set environment variables for build - Using proper domain from memory analysis
ENV VITE_API_URL=https://api.workflowguard.pro
ENV VITE_APP_URL=https://www.workflowguard.pro
ENV NODE_ENV=production

# Debug: Check TypeScript compilation first
RUN echo "=== CHECKING FRONTEND TYPESCRIPT COMPILATION ===" && npx tsc --noEmit

# Debug: Show build script
RUN echo "=== FRONTEND BUILD SCRIPT ===" && npm run --silent build --dry-run || echo "Build script check complete"

# Build the application with maximum memory and debugging
RUN echo "=== STARTING FRONTEND BUILD ===" && NODE_OPTIONS="--max-old-space-size=4096" npm run build

# Stage 2: Production stage
FROM nginx:alpine AS production

# Copy built application
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy custom nginx configuration
COPY nginx.production.conf /etc/nginx/nginx.conf

# Expose port
EXPOSE 80

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
